package com.bnetworks.godownx;

//DAO Packages
import com.bnetworks.godownx.dao.Product_stocksTable;
import com.bnetworks.godownx.ui.AutoCompletion;
import com.bnetworks.godownx.dao.ProductsTable;

//UI Stuff
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

//Java Default packages
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: Akash Bedi
 * Date: 7/29/13
 * Time: 10:38 PM
 */
public class Main {
    private JComboBox productsComboBox;
    private JPanel WareHouseForm;
    private JTextField productPriceJTextField;
    private JTextField unitsPerBoxJTextField;
    private JButton saveProductJButton;
    private JRadioButton noStockChangeJRadio;
    private JRadioButton addStockJRadio;
    private JRadioButton removeStockJRadio;
    private JTextField stockQuantityJTextField;
    private JTable productStockJTable;
    private JTextField productUnits;
    private JLabel renamingStock;
    private JTextArea stockComment;
    private List<ProductsTable.Row> productList;
    private DefaultTableModel model;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        WareHouseForm = new JPanel();
        WareHouseForm.setLayout(new FormLayout("fill:max(d;10px):noGrow,left:4dlu:noGrow,fill:119px:noGrow,left:129dlu:noGrow,left:102dlu:noGrow,left:24dlu:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:max(d;4px):noGrow,top:8dlu:noGrow,center:28px:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,center:max(d;4px):noGrow,top:6dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,center:max(d;4px):noGrow,center:max(d;4px):noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,center:160px:grow,center:max(d;4px):noGrow,top:4dlu:noGrow,top:18dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        WareHouseForm.setEnabled(true);
        WareHouseForm.setFont(new Font("Verdana", Font.PLAIN, 12));
        final JLabel label1 = new JLabel();
        label1.setEnabled(true);
        label1.setFont(new Font("Verdana", Font.PLAIN, 12));
        label1.setText("Product name:");
        CellConstraints cc = new CellConstraints();
        WareHouseForm.add(label1, cc.xy(3, 3));
        final JLabel label2 = new JLabel();
        label2.setEnabled(true);
        label2.setFont(new Font("Verdana", Font.PLAIN, 12));
        label2.setText("Units per Box:");
        WareHouseForm.add(label2, cc.xy(3, 6));
        productsComboBox.setEditable(true);
        productsComboBox.setEnabled(true);
        productsComboBox.setFont(new Font("Verdana", Font.PLAIN, 12));
        productsComboBox.setMinimumSize(new Dimension(100, 23));
        productsComboBox.setPreferredSize(new Dimension(200, 23));
        WareHouseForm.add(productsComboBox, cc.xy(4, 3));
        final JLabel label3 = new JLabel();
        label3.setEnabled(true);
        label3.setFont(new Font("Verdana", Font.PLAIN, 12));
        label3.setText("Product Stock Logs");
        WareHouseForm.add(label3, cc.xyw(3, 17, 2));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setEnabled(true);
        scrollPane1.setFont(new Font("Verdana", Font.PLAIN, 12));
        WareHouseForm.add(scrollPane1, cc.xyw(3, 18, 4, CellConstraints.FILL, CellConstraints.FILL));
        productStockJTable = new JTable();
        productStockJTable.setAutoCreateRowSorter(false);
        productStockJTable.setEnabled(true);
        productStockJTable.setFont(new Font("Verdana", Font.PLAIN, 12));
        productStockJTable.setUpdateSelectionOnSort(true);
        scrollPane1.setViewportView(productStockJTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:69px:noGrow,left:4dlu:noGrow,fill:75px:noGrow,fill:max(d;4px):noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:187px:noGrow,left:4dlu:noGrow,left:81dlu:noGrow,left:11dlu:noGrow,fill:14px:noGrow,fill:39px:noGrow", "center:27px:noGrow,top:5dlu:noGrow,center:21px:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow"));
        panel1.setEnabled(true);
        panel1.setFont(new Font("Verdana", Font.PLAIN, 12));
        WareHouseForm.add(panel1, new CellConstraints(3, 13, 6, 1, CellConstraints.DEFAULT, CellConstraints.DEFAULT, new Insets(5, 0, 0, 5)));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Product Stock Details"));
        noStockChangeJRadio = new JRadioButton();
        noStockChangeJRadio.setActionCommand("NO_CHANGE");
        noStockChangeJRadio.setEnabled(true);
        noStockChangeJRadio.setFont(new Font("Verdana", Font.PLAIN, 12));
        noStockChangeJRadio.setSelected(true);
        noStockChangeJRadio.setText("No Stock Change");
        panel1.add(noStockChangeJRadio, cc.xyw(3, 1, 7));
        final JLabel label4 = new JLabel();
        label4.setEnabled(true);
        label4.setFont(new Font("Verdana", Font.PLAIN, 12));
        label4.setText("Quantity:");
        panel1.add(label4, new CellConstraints(3, 3, 1, 1, CellConstraints.LEFT, CellConstraints.DEFAULT, new Insets(0, 5, 0, 0)));
        addStockJRadio = new JRadioButton();
        addStockJRadio.setActionCommand("ADD_STOCK");
        addStockJRadio.setEnabled(true);
        addStockJRadio.setFont(new Font("Verdana", Font.PLAIN, 12));
        addStockJRadio.setText("Add Stock");
        panel1.add(addStockJRadio, cc.xy(10, 1));
        removeStockJRadio = new JRadioButton();
        removeStockJRadio.setActionCommand("REMOVE_STOCK");
        removeStockJRadio.setEnabled(true);
        removeStockJRadio.setFont(new Font("Verdana", Font.PLAIN, 12));
        removeStockJRadio.setText("Remove Stock");
        panel1.add(removeStockJRadio, cc.xy(12, 1));
        stockQuantityJTextField = new JTextField();
        stockQuantityJTextField.setEnabled(false);
        stockQuantityJTextField.setFont(new Font("Verdana", Font.PLAIN, 12));
        panel1.add(stockQuantityJTextField, cc.xy(5, 3));
        final JLabel label5 = new JLabel();
        label5.setEnabled(false);
        label5.setFont(new Font("Verdana", Font.PLAIN, 12));
        label5.setText("Units (box size * quantity ) :");
        panel1.add(label5, cc.xy(10, 3));
        productUnits = new JTextField();
        productUnits.setEditable(false);
        productUnits.setEnabled(false);
        productUnits.setFont(new Font("Verdana", Font.PLAIN, 12));
        panel1.add(productUnits, new CellConstraints(11, 3, 2, 1, CellConstraints.FILL, CellConstraints.DEFAULT, new Insets(0, 0, 0, 10)));
        stockComment = new JTextArea();
        stockComment.setRows(4);
        panel1.add(stockComment, new CellConstraints(3, 7, 10, 4, CellConstraints.FILL, CellConstraints.FILL, new Insets(0, 0, 0, 10)));
        final JLabel label6 = new JLabel();
        label6.setFont(new Font("Verdana", Font.PLAIN, 12));
        label6.setText("Commments:");
        panel1.add(label6, new CellConstraints(3, 5, 3, 1, CellConstraints.DEFAULT, CellConstraints.DEFAULT, new Insets(2, 5, 0, 0)));
        unitsPerBoxJTextField = new JTextField();
        unitsPerBoxJTextField.setEnabled(true);
        unitsPerBoxJTextField.setFont(new Font("Verdana", Font.PLAIN, 12));
        unitsPerBoxJTextField.setText("");
        WareHouseForm.add(unitsPerBoxJTextField, cc.xy(4, 6, CellConstraints.FILL, CellConstraints.FILL));
        saveProductJButton = new JButton();
        saveProductJButton.setEnabled(true);
        saveProductJButton.setFont(new Font("Verdana", Font.PLAIN, 12));
        saveProductJButton.setText("Save");
        saveProductJButton.setMnemonic('S');
        saveProductJButton.setDisplayedMnemonicIndex(0);
        WareHouseForm.add(saveProductJButton, cc.xyw(5, 22, 2, CellConstraints.FILL, CellConstraints.FILL));
        renamingStock = new JLabel();
        renamingStock.setFont(new Font("Verdana", Font.BOLD, 12));
        renamingStock.setText("na");
        WareHouseForm.add(renamingStock, cc.xy(6, 21, CellConstraints.RIGHT, CellConstraints.DEFAULT));
        final JLabel label7 = new JLabel();
        label7.setFont(new Font("Verdana", Font.PLAIN, 12));
        label7.setText("Product Stocks Left:  ");
        WareHouseForm.add(label7, cc.xy(5, 21, CellConstraints.RIGHT, CellConstraints.DEFAULT));
        label1.setLabelFor(productsComboBox);
        label2.setLabelFor(productsComboBox);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(noStockChangeJRadio);
        buttonGroup.add(addStockJRadio);
        buttonGroup.add(removeStockJRadio);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return WareHouseForm;
    }

    private enum PRODUCT_STOCK_CHANGE_TYPE {NO_CHANGE, ADD, REMOVE}

    ;

    public static void main(String[] args) {

        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }

        JFrame frame = new JFrame("Product Stocks");
        frame.setContentPane(new Main().WareHouseForm);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    public Main() {
        //GUI Part
        $$$setupUI$$$();

        //TODO: This is bad, shall retrive user details from db later
        while (true) {
            //@Thanks, http://stackoverflow.com/questions/8881213/joptionpane-to-get-password
            JPanel panel = new JPanel();
            JLabel label = new JLabel("Enter a password:");
            JPasswordField pass = new JPasswordField(10);
            panel.add(label);
            panel.add(pass);
            String[] options = new String[]{"OK", "Cancel"};
            int option = JOptionPane.showOptionDialog(null, panel, "Enter Admin Password",
                    JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[1]);
            //If User pressed Cancel, exit
            if (option == 1)    {
                System.exit(0);
            }

            String password = new String(pass.getPassword());
            if (!password.equals("pradam")) {
                JOptionPane.showMessageDialog(null, "Invalid Password Entered");
            } else {
                break;
            }
        }

        model = new DefaultTableModel() {
            //make the jtable cells not editable for now..
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        productStockJTable.setModel(model);

        //Adds all the existing products to the JComboBox
        this.populateExistingProducts();

        //Auto completion for Product JComboBox
        AutoCompletion.enable(productsComboBox);

        //Add button Listeners
        saveProductJButton.addActionListener(new SaveProductActionListener());

        ActionListener listener = new ProductStockRadioButtonActionListener();
        noStockChangeJRadio.addActionListener(listener);
        addStockJRadio.addActionListener(listener);
        removeStockJRadio.addActionListener(listener);

        //Reset Inputs
        productsComboBox.setSelectedIndex(-1);
        this.clearProductInputs();

        //Initalizing JTable Columns
        model.addColumn("Stock Quantity");
        model.addColumn("Date");
        model.addColumn("Comments");
        productStockJTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        productStockJTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        productStockJTable.getColumnModel().getColumn(1).setPreferredWidth(120);
        productStockJTable.getColumnModel().getColumn(2).setPreferredWidth(275);

        stockQuantityJTextField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                super.keyReleased(e);    //To change body of overridden methods use File | Settings | File Templates.
                updateProductUnits();
            }
        });
        stockQuantityJTextField.addKeyListener(new KeyAdapter() {
        });
    }

    private void createUIComponents() {
        productsComboBox = new JComboBox();

        productsComboBox.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {

                if (e.getStateChange() == ItemEvent.SELECTED) {

                    if (e.getItem() instanceof ProductsTable.Row) {

                        ProductsTable.Row product = (ProductsTable.Row) e.getItem();

                        //productPriceJTextField.setText(product.getSell_price() + "");
                        unitsPerBoxJTextField.setText(product.getBox_quantity() + "");

                        try {
                            updateProductStocksTable(product.getID());
                        } catch (SQLException ee) {
                            ee.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                        }
                    }
                }
            }
        });

        productsComboBox.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                super.keyReleased(e);    //To change body of overridden methods use File | Settings | File Templates.
                //Ignore enter key to reset elements
                if (false == productsComboBox.isPopupVisible() && 10 != e.getKeyCode())
                    clearProductInputs();
            }
        });
    }

    public void clearProductInputs() {
        productStockJTable.removeAll();
        this.clearProductStockTable();
        unitsPerBoxJTextField.setText("1");
    }

    public void clearProductStockTable() {
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--)
            model.removeRow(i);

        model.fireTableRowsInserted(0, 0);
        renamingStock.setText("na");
        stockComment.setText("");

    }

    public void updateProductStocksTable(int productId) throws SQLException {
        //Lets clear the table first
        clearProductStockTable();

        int remainingQuantity = 0;

        //Re-add elements to table
        for (Product_stocksTable.Row productStock : Product_stocksTable.getRows("product_id=" + productId)) {
            model.addRow(new Object[]{productStock.getBought_quantity(), productStock.getPurchase_date(), productStock.getComments()});
            remainingQuantity += productStock.getBought_quantity();
        }
        renamingStock.setText(remainingQuantity + "");
        model.fireTableDataChanged();
    }

    public void updateProductUnits() {
        ProductsTable.Row product;

    }

    public void populateExistingProducts() {
        ProductsTable.Row[] products = null;

        try {
            products = ProductsTable.getAllRows();
        } catch (SQLException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        for (ProductsTable.Row product : products) {

            productsComboBox.addItem(product);
        }

    }

    class SaveProductActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {

            if (productsComboBox.getSelectedItem() == null) {
                JOptionPane.showMessageDialog(null, "Please select/add a Product.");
                return;
            }


            ProductsTable.Row product;
            //Add new item if not present, else update existing Item
            if (-1 == productsComboBox.getSelectedIndex()) {
                product = ProductsTable.getRow();
                product.setName(productsComboBox.getSelectedItem().toString());
            } else {
                product = (ProductsTable.Row) productsComboBox.getSelectedItem();
            }
            //product.setSell_price(Double.parseDouble(productPriceJTextField.getText()));
            product.setBox_quantity(Integer.parseInt(unitsPerBoxJTextField.getText()));

            try {
                if (product.getID() == 0) {
                    //Make sure the newly added product goes in the combox box
                    productsComboBox.addItem(product);
                    product.setID((int) product.insert());
                    JOptionPane.showMessageDialog(null, "New Product named \'" + product.getName() + "' added");
                } else {
                    product.update();
                }
            } catch (SQLException e1) {
                e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }

            //Add product stocks
            if (stockQuantityJTextField.isEnabled()) {
                //Validate Product Stock quantity, if numeric
                if (!stockQuantityJTextField.getText().matches("^[0-9]+$") || stockQuantityJTextField.getText().length() < 1) {
                    JOptionPane.showMessageDialog(null, "Please enter Valid Product Stock quantity");
                    return;
                }

                int addOrRemoveStock = 1;
                int productStockQuantity = Integer.parseInt(stockQuantityJTextField.getText());

                //If the stock is removed, we multiply the input quantity by -1 to reduce it
                if (removeStockJRadio.isSelected()) {
                    addOrRemoveStock = -1;
                }
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                Product_stocksTable.Row productStock = Product_stocksTable.getRow();
                productStock.setProduct_id(product.getID());
                productStock.setBought_quantity(productStockQuantity * addOrRemoveStock);
                productStock.setPurchase_date(dateFormat.format(new Date()));
                productStock.setComments(stockComment.getText());
                try {
                    productStock.insert();
                } catch (SQLException e1) {
                    e1.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                }
                JOptionPane.showMessageDialog(null, "Product Stock Updated");
            }
            //Forcing a change trigger event on Combo Box to make sure the data is updated
            productsComboBox.setSelectedIndex(-1);
            productsComboBox.setSelectedItem(product);

        }
    }

    class ProductStockRadioButtonActionListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {

            if (e.getActionCommand().equals(PRODUCT_STOCK_CHANGE_TYPE.NO_CHANGE.toString())) {
                stockQuantityJTextField.setEnabled(false);
            } else {
                stockQuantityJTextField.setEnabled(true);
            }
        }
    }

}

